/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data,
 * shared access via explicit membership lists, and public read access for
 * specific content. All writes are protected by authorization checks based
 * on verified user identities. Financial data (bank accounts) MUST be
 * tokenized and handled by secure Cloud Functions, not stored directly.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user data.
 * - /users/{userId}/profile: Stores user profile data.
 * - /users/{userId}/dailySavings/{dailySavingId}: Stores user's daily saving records.
 * - /users/{userId}/goals/{goalId}: Stores user's saving goals.
 * - /groups/{groupId}: Stores group information with membership lists.
 * - /groups/{groupId}/contributions/{contributionId}: Stores group contributions.
 * - /groups/{groupId}/payouts/{payoutId}: Stores group payouts.
 * - /users/{userId}/budgets/{budgetId}: Stores user's budget information.
 * - /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}: Stores budget items.
 * - /users/{userId}/budgets/{budgetId}/bills/{billId}: Stores bills.
 * - /literacyTopics/{topicId}: Stores publicly readable literacy topics.
 * - /families/{familyId}: Stores family information.
 * - /users/{userId}/notifications/{notificationId}: Stores user notifications.
 * - /users/{userId}/userLiteracyTopics/{userLiteracyTopicId}: Stores user literacy topic interactions.
 *
 * Key Security Decisions:
 * - User data is strictly owned and accessible only by the authenticated user.
 * - Group data is shared between members defined in the group document.
 * - Financial data (bankAccount) is tokenized and handled by secure Cloud Functions.
 * - Public read access is granted only to the /literacyTopics collection.
 * - List operations are secured based on path-based or lookup-based authorization.
 *
 * Denormalization for Authorization:
 * - Group documents contain a 'members' map (UID -> role) for easy authorization checks.
 * - Contribution and Payout documents denormalize the 'members' map from their parent Group.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to user profile documents.
     * @path /users/{userId}/profile
     */
    match /users/{userId}/profile {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to daily saving documents.
     * @path /users/{userId}/dailySavings/{dailySavingId}
     */
    match /users/{userId}/dailySavings/{dailySavingId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to goal documents.
     * @path /users/{userId}/goals/{goalId}
     */
    match /users/{userId}/goals/{goalId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to group documents based on membership.
     * @path /groups/{groupId}
     */
    match /groups/{groupId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isMember(groupId) {
          return isSignedIn() && resource.data.memberIds[request.auth.uid] != null;
      }

       function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get: if isSignedIn() && isMember(groupId);
      allow list: if isSignedIn(); // Any signed-in user can list groups.  Consider tightening this.
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isOwner(resource.data.ownerId);
    }

    /**
     * @description Allows access to contribution documents based on group membership.
     * @path /groups/{groupId}/contributions/{contributionId}
     */
    match /groups/{groupId}/contributions/{contributionId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isMember(groupId) {
        return isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds[request.auth.uid] != null;
      }

      allow get: if isSignedIn() && isMember(groupId);
      allow list: if isSignedIn() && isMember(groupId);
      allow create: if isSignedIn() && isMember(groupId) && request.auth.uid == request.resource.data.userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to payout documents based on group membership.
     * @path /groups/{groupId}/payouts/{payoutId}
     */
    match /groups/{groupId}/payouts/{payoutId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isMember(groupId) {
         return isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds[request.auth.uid] != null;
      }

      allow get: if isSignedIn() && isMember(groupId);
      allow list: if isSignedIn() && isMember(groupId);
      allow create: if isSignedIn() && isMember(groupId) && request.auth.uid == request.resource.data.userId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to budget documents.
     * @path /users/{userId}/budgets/{budgetId}
     */
    match /users/{userId}/budgets/{budgetId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to budget item documents.
     * @path /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}
     */
    match /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to bill documents.
     * @path /users/{userId}/budgets/{budgetId}/bills/{billId}
     */
    match /users/{userId}/budgets/{budgetId}/bills/{billId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
       allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to literacy topic documents.
     * @path /literacyTopics/{topicId}
     */
    match /literacyTopics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to family documents.
     * @path /families/{familyId}
     */
    match /families/{familyId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParentOrChild(familyId) {
         return isSignedIn() && (resource.data.parentIds[request.auth.uid] != null || resource.data.childIds[request.auth.uid] != null);
      }

      allow get: if isSignedIn() && isParentOrChild(familyId);
      allow list: if isSignedIn(); // Any signed-in user can list families. Consider tightening this.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows access to notification documents.
     * @path /users/{userId}/notifications/{notificationId}
     */
    match /users/{userId}/notifications/{notificationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows access to user literacy topic documents.
     * @path /users/{userId}/userLiteracyTopics/{userLiteracyTopicId}
     */
    match /users/{userId}/userLiteracyTopics/{userLiteracyTopicId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}