rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @path N/A
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     * @path N/A
     */
    function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId && resource.data != null;
    }

    /**
     * @description Checks if the authenticated user is a member of the group.
     * @path N/A
     */
    function isGroupMember(groupId) {
      return isSignedIn() && get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds[request.auth.uid] == true;
    }

    /**
     * @description Checks if the authenticated user is a parent or child of the family.
     * @path N/A
     */
    function isFamilyMember(familyId) {
        return isSignedIn() && (get(/databases/$(database)/documents/families/$(familyId)).data.parentIds[request.auth.uid] == true || get(/databases/$(database)/documents/families/$(familyId)).data.childIds[request.auth.uid] == true);
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/profile collection.
     * @path /users/{userId}/profile
     */
    match /users/{userId}/profile {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/dailySavings/{dailySavingId} collection.
     * @path /users/{userId}/dailySavings/{dailySavingId}
     */
    match /users/{userId}/dailySavings/{dailySavingId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/goals/{goalId} collection.
     * @path /users/{userId}/goals/{goalId}
     */
    match /users/{userId}/goals/{goalId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /groups/{groupId} collection.
     * @path /groups/{groupId}
     */
    match /groups/{groupId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isGroupMember(groupId);
      allow delete: if isGroupMember(groupId);
    }

    /**
     * @description Rules for the /groups/{groupId}/contributions/{contributionId} collection.
     * @path /groups/{groupId}/contributions/{contributionId}
     */
    match /groups/{groupId}/contributions/{contributionId} {
      allow get: if isGroupMember(groupId);
      allow list: if isGroupMember(groupId);
      allow create: if isGroupMember(groupId);
      allow update: if isGroupMember(groupId);
      allow delete: if isGroupMember(groupId);
    }

    /**
     * @description Rules for the /groups/{groupId}/payouts/{payoutId} collection.
     * @path /groups/{groupId}/payouts/{payoutId}
     */
    match /groups/{groupId}/payouts/{payoutId} {
      allow get: if isGroupMember(groupId);
      allow list: if isGroupMember(groupId);
      allow create: if isGroupMember(groupId);
      allow update: if isGroupMember(groupId);
      allow delete: if isGroupMember(groupId);
    }

    /**
     * @description Rules for the /users/{userId}/budgets/{budgetId} collection.
     * @path /users/{userId}/budgets/{budgetId}
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} collection.
     * @path /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}
     */
    match /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/budgets/{budgetId}/bills/{billId} collection.
     * @path /users/{userId}/budgets/{budgetId}/bills/{billId}
     */
    match /users/{userId}/budgets/{budgetId}/bills/{billId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /literacyTopics/{topicId} collection.
     * @path /literacyTopics/{topicId}
     */
    match /literacyTopics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin roles or a dedicated creation process.
      allow update: if false; // TODO: Add admin roles or a dedicated update process.
      allow delete: if false; // TODO: Add admin roles or a dedicated deletion process.
    }

    /**
     * @description Rules for the /families/{familyId} collection.
     * @path /families/{familyId}
     */
    match /families/{familyId} {
      allow get: if isFamilyMember(familyId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isFamilyMember(familyId);
      allow delete: if isFamilyMember(familyId);
    }
    
    /**
     * @description Rules for the /families/{familyId}/goals/{goalId} collection.
     * @path /families/{familyId}/goals/{goalId}
     */
    match /families/{familyId}/goals/{goalId} {
      allow get: if isFamilyMember(familyId);
      allow list: if isFamilyMember(familyId);
      allow create: if isFamilyMember(familyId);
      allow update: if isFamilyMember(familyId);
      allow delete: if isFamilyMember(familyId);
    }

    /**
     * @description Rules for the /users/{userId}/notifications/{notificationId} collection.
     * @path /users/{userId}/notifications/{notificationId}
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/userLiteracyTopics/{userLiteracyTopicId} collection.
     * @path /users/{userId}/userLiteracyTopics/{userLiteracyTopicId}
     */
    match /users/{userId}/userLiteracyTopics/{userLiteracyTopicId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}