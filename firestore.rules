/**
 * @file Firebase Security Rules for Firestore.
 *
 * @Core Philosophy: This ruleset enforces a strict user-ownership model for most data, with shared access controls for collaborative entities like Groups and Families. Public read access is granted to the LiteracyTopics collection.
 *
 * @Data Structure:
 *   - /users/{userId}: Stores user information; only accessible by the user themselves.
 *   - /users/{userId}/profile: Stores profile information; only accessible by the user themselves.
 *   - /users/{userId}/dailySavings/{dailySavingId}: Stores daily savings; only accessible by the user themselves.
 *   - /users/{userId}/goals/{goalId}: Stores saving goals; only accessible by the user themselves.
 *   - /groups/{groupId}: Stores group information with owner and member lists. Accessible to group members.
 *   - /groups/{groupId}/contributions/{contributionId}: Stores group contributions; accessible to group members.
 *   - /groups/{groupId}/payouts/{payoutId}: Stores group payouts; accessible to group members.
 *   - /users/{userId}/budgets/{budgetId}: Stores budget information; only accessible by the user themselves.
 *   - /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}: Stores budget items; only accessible by the user themselves.
 *   - /users/{userId}/budgets/{budgetId}/bills/{billId}: Stores bills; only accessible by the user themselves.
 *   - /literacyTopics/{topicId}: Stores financial literacy topics; publicly readable.
 *   - /families/{familyId}: Stores family information with parent and child lists. Accessible to family members.
 *   - /families/{familyId}/goals/{goalId}: Stores family goals; accessible to family members.
 *   - /users/{userId}/notifications/{notificationId}: Stores notifications; only accessible by the user themselves.
 *   - /users/{userId}/userLiteracyTopics/{userLiteracyTopicId}: Stores user literacy topics; only accessible by the user themselves.
 *
 * @Key Security Decisions:
 *   - User listing is disallowed to protect privacy.
 *   - Most collections enforce strict user ownership.
 *   - Collaborative entities use denormalized member lists/maps for efficient authorization.
 *   - Public read access is granted to the LiteracyTopics collection.
 *
 * @Denormalization for Authorization:
 *   - Group documents include a `members` map for fast membership checks.
 *   - Contribution and Payout documents denormalize the `members` map from their parent Group for authorization independence.
 *   - Family documents include `parentIds` and `childIds` maps for fast family membership checks.
 *
 * @Structural Segregation: Private user data is stored under /users/{userId} to maintain a consistent security posture.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Controls access to user documents.
     * @path: /users/{userId}
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own document.
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create their own document.
     * @deny: (get) User with ID 'otherUserId' cannot read the document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (create) User with ID 'otherUserId' cannot create a document with ID 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to user profile documents.
     * @path: /users/{userId}/profile
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create their profile.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own profile.
     * @deny: (create) User with ID 'otherUserId' cannot create a profile for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the profile of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own profile.
     */
    match /users/{userId}/profile {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to daily saving documents.
     * @path: /users/{userId}/dailySavings/{dailySavingId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a daily saving document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own daily saving document.
     * @deny: (create) User with ID 'otherUserId' cannot create a daily saving document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the daily saving document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own daily savings.
     */
    match /users/{userId}/dailySavings/{dailySavingId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to goal documents.
     * @path: /users/{userId}/goals/{goalId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a goal document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own goal document.
     * @deny: (create) User with ID 'otherUserId' cannot create a goal document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the goal document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own goals.
     */
    match /users/{userId}/goals/{goalId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to group documents.
     * @path: /groups/{groupId}
     * @allow: (get) User who is a member of the group can read the group document.
     * @allow: (create) User can create a group document if the ownerId matches their user ID.
     * @deny: (get) User who is not a member of the group cannot read the group document.
     * @principle: Enforces group membership for read access and ownership for create access.
     */
    match /groups/{groupId} {
      allow get: if isSignedIn() && isGroupMember(groupId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isGroupOwner(groupId);
      allow delete: if isSignedIn() && isGroupOwner(groupId);
    }

    /**
     * @description: Controls access to contribution documents within a group.
     * @path: /groups/{groupId}/contributions/{contributionId}
     * @allow: (create) User who is a member of the group can create a contribution document.
     * @allow: (get) User who is a member of the group can read a contribution document.
     * @deny: (create) User who is not a member of the group cannot create a contribution document.
     * @deny: (get) User who is not a member of the group cannot read a contribution document.
     * @principle: Enforces group membership for access to contribution documents.
     */
    match /groups/{groupId}/contributions/{contributionId} {
      allow get: if isSignedIn() && isGroupMember(groupId);
      allow list: if false;
      allow create: if isSignedIn() && isGroupMember(groupId);
      allow update: if isSignedIn() && isGroupOwner(groupId);
      allow delete: if isSignedIn() && isGroupOwner(groupId);
    }

    /**
     * @description: Controls access to payout documents within a group.
     * @path: /groups/{groupId}/payouts/{payoutId}
     * @allow: (create) User who is a member of the group can create a payout document.
     * @allow: (get) User who is a member of the group can read a payout document.
     * @deny: (create) User who is not a member of the group cannot create a payout document.
     * @deny: (get) User who is not a member of the group cannot read a payout document.
     * @principle: Enforces group membership for access to payout documents.
     */
    match /groups/{groupId}/payouts/{payoutId} {
      allow get: if isSignedIn() && isGroupMember(groupId);
       allow list: if false;
      allow create: if isSignedIn() && isGroupMember(groupId);
      allow update: if isSignedIn() && isGroupOwner(groupId);
      allow delete: if isSignedIn() && isGroupOwner(groupId);
    }

    /**
     * @description: Controls access to budget documents.
     * @path: /users/{userId}/budgets/{budgetId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a budget document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own budget document.
     * @deny: (create) User with ID 'otherUserId' cannot create a budget document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the budget document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own budgets.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to budget item documents.
     * @path: /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a budget item document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own budget item document.
     * @deny: (create) User with ID 'otherUserId' cannot create a budget item document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the budget item document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own budget items.
     */
    match /users/{userId}/budgets/{budgetId}/budgetItems/{budgetItemId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to bill documents.
     * @path: /users/{userId}/budgets/{budgetId}/bills/{billId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a bill document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own bill document.
     * @deny: (create) User with ID 'otherUserId' cannot create a bill document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the bill document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own bills.
     */
    match /users/{userId}/budgets/{budgetId}/bills/{billId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to literacy topic documents.
     * @path: /literacyTopics/{topicId}
     * @allow: (get) Any user can read a literacy topic document.
     * @principle: Allows public read access to literacy topics.
     */
    match /literacyTopics/{topicId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation if needed
      allow update: if false; // TODO: Add admin validation if needed
      allow delete: if false; // TODO: Add admin validation if needed
    }

    /**
     * @description: Controls access to family documents.
     * @path: /families/{familyId}
     * @allow: (get) User who is a member of the family can read the family document.
     * @allow: (create) User can create a family document.
     * @deny: (get) User who is not a member of the family cannot read the family document.
     * @principle: Enforces family membership for read access.
     */
    match /families/{familyId} {
      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isFamilyParent(familyId);
      allow delete: if isSignedIn() && isFamilyParent(familyId);
    }

     /**
      * @description: Controls access to family goal documents.
      * @path: /families/{familyId}/goals/{goalId}
      * @allow: (get) User who is a member of the family can read the family goal document.
      * @allow: (create) User who is a member of the family can create the family goal document.
      * @deny: (get) User who is not a member of the family cannot read the family goal document.
      * @principle: Enforces family membership for access to family goal documents.
      */
    match /families/{familyId}/goals/{goalId} {
      allow get: if isSignedIn() && isFamilyMember(familyId);
      allow list: if false;
      allow create: if isSignedIn() && isFamilyMember(familyId);
      allow update: if isSignedIn() && isFamilyParent(familyId);
      allow delete: if isSignedIn() && isFamilyParent(familyId);
    }

    /**
     * @description: Controls access to notification documents.
     * @path: /users/{userId}/notifications/{notificationId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a notification document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own notification document.
     * @deny: (create) User with ID 'otherUserId' cannot create a notification document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the notification document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own notifications.
     */
    match /users/{userId}/notifications/{notificationId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description: Controls access to user literacy topic documents.
     * @path: /users/{userId}/userLiteracyTopics/{userLiteracyTopicId}
     * @allow: (create) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can create a user literacy topic document.
     * @allow: (get) User with ID 'bl1yCS7wS3e59LveSQmudEhopSA3' can read their own user literacy topic document.
     * @deny: (create) User with ID 'otherUserId' cannot create a user literacy topic document for user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @deny: (get) User with ID 'otherUserId' cannot read the user literacy topic document of user 'bl1yCS7wS3e59LveSQmudEhopSA3'.
     * @principle: Enforces document ownership, allowing users to only access their own user literacy topics.
     */
    match /users/{userId}/userLiteracyTopics/{userLiteracyTopicId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    // --- Helper Functions ---

    /**
     * @description: Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description: Checks if the authenticated user's ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description: Checks if the authenticated user's ID matches the provided user ID and the resource exists.
     * @param {string} userId - The user ID to compare against.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description: Checks if the authenticated user is a member of the specified group.
     * @param {string} groupId - The ID of the group to check.
     */
    function isGroupMember(groupId) {
        return get(/databases/$(database)/documents/groups/$(groupId)).data.memberIds[request.auth.uid] == true;
    }

    /**
     * @description: Checks if the authenticated user is the owner of the specified group.
     * @param {string} groupId - The ID of the group to check.
     */
    function isGroupOwner(groupId) {
      return get(/databases/$(database)/documents/groups/$(groupId)).data.ownerId == request.auth.uid;
    }

    /**
     * @description: Checks if the authenticated user is a member of the specified family (either parent or child).
     * @param {string} familyId - The ID of the family to check.
     */
    function isFamilyMember(familyId) {
      return (get(/databases/$(database)/documents/families/$(familyId)).data.parentIds[request.auth.uid] == true) || (get(/databases/$(database)/documents/families/$(familyId)).data.childIds[request.auth.uid] == true);
    }
    
    /**
     * @description: Checks if the authenticated user is a parent of the specified family.
     * @param {string} familyId - The ID of the family to check.
     */
    function isFamilyParent(familyId) {
      return get(/databases/$(database)/documents/families/$(familyId)).data.parentIds[request.auth.uid] == true;
    }
  }
}